<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:solr="http://www.springframework.org/schema/data/solr"
       xsi:schemaLocation="http://www.springframework.org/schema/data/solr
        http://www.springframework.org/schema/data/solr/spring-solr-1.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    
    <!--扫描项目下所有的包、-->
    <context:component-scan base-package="com.huanletao.huanletao">
        <context:exclude-filter type="regex"
                                expression="com.huanletao.huanletao.controller.*" />
   </context:component-scan>

    <!-- 开启注解驱动 -->
   <tx:annotation-driven transaction-manager="huanletaoTransactionManager" proxy-target-class="true"/>

    <!--加载数据库配置文件-->
    <context:property-placeholder location="classpath*:properties/jdbc.properties" ignore-unresolvable="true"/>
    <!--加载sdk属性文件-->
    <context:property-placeholder location="classpath*:properties/sdk.properties" ignore-unresolvable="true"/>
    <!--加载solr属性文件-->
    <context:property-placeholder location="classpath*:properties/solr.properties" ignore-unresolvable="true"/>

    <!-- 配置 solrServer -->
    <solr:solr-server id="solrServer" url="${solr.url}"/>

    <!-- 配置 solrTemplate 模板 -->
    <bean id="solrTemplate" class="org.springframework.data.solr.core.SolrTemplate">
        <constructor-arg ref="solrServer"/>
    </bean>

    <!--配置阿里云的数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${pwd}"/>
    </bean>

      <!--配置sqlsessionfactory-->
     <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <!--配置dataSource数据源-->
         <property name="dataSource" ref="dataSource"/>
         <!--给包起别名-->
         <property name="typeAliasesPackage" value="com.huanletao.huanletao.entity"/>
         <!--配置映射文件-->

        <property name="mapperLocations" value="classpath:com/huanletao/huanletao/mapper/*.xml"/>
        <!--为先显示日志信息-->
        <property name="configLocation" value="classpath:properties/mybatis-cfg.xml"/>
         <!--配置分页插件-->
         <property name="plugins">
             <array>
                 <bean class="com.github.pagehelper.PageHelper">
                     <property name="properties">
                         <value>
                             dialect=mysql
                         </value>
                     </property>
                 </bean>
             </array>
         </property>
     </bean>

    <!--shiro 的相关配置。-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--登录页的url-->
        <property name="loginUrl" value="/admin/login.html"/>
        <!--未认证的跳转页面-->
        <property name="unauthorizedUrl" value="403.xml" />
        <!--过滤器链//从上往下匹配拦截认证，-->
        <property name="filterChainDefinitions">
            <value>
                <!--登录页面不需要拦截-->
                /admin/login.html = anon
                <!--提交登录请求的url也不许要拦截-->
                /admin/login = anon
                <!--样式和js不拦截-->
                /static/* = anon
                /index.html = anon
                /search.html = anon
                /regsiter.html = anon
                /login.html = anon
                /item/search.do = anon
                <!--拦截-->
                /admin/index.html = authc
                <!--登录页面以外的需要拦截认证-->
                /* = authc
            </value>
        </property>
    </bean>


    <!--创建SecurityManager对象-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--将realm设置到securityManager主体中-->
        <property name="realm" ref="realm"/>
    </bean>

    <bean id="realm" class="com.huanletao.huanletao.realm.CustomRealmMD5"></bean>

    <!--任务调度工厂-->
    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" />

    <!--扫描接口所在的包-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.huanletao.huanletao.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
    </bean>

    <!--注册事务管理器。-->
    <bean id="huanletaoTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--<tx:advice id="txAdvice" transaction-manager="huanletaoTransactionManager">-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; 根据方法名指定事务属性 &ndash;&gt;-->
            <!--<tx:method name="update*"-->
                       <!--propagation="REQUIRED" isolation="READ_COMMITTED"-->
                       <!--no-rollback-for="Exception.class" read-only="false"-->
                       <!--rollback-for="Exception.class" timeout="5"/>&lt;!&ndash; updatUser：对该方法进行事物的属性配置 &ndash;&gt;-->
            <!--<tx:method name="delete*"/>&lt;!&ndash; 代表所有方法，所有的事物取默认配置 &ndash;&gt;-->
            <!--<tx:method name="get*" read-only="true"/>&lt;!&ndash; 可以使用通配符的写法，所有使用get开头的方法，它的事务都是只做查询 &ndash;&gt;-->
            <!--<tx:method name="find*" read-only="true"/>&lt;!&ndash; 可以使用通配符的写法，所有使用get开头的方法，它的事务都是只做查询 &ndash;&gt;-->
            <!--<tx:method name="select*" read-only="true"/>&lt;!&ndash; 可以使用通配符的写法，所有使用get开头的方法，它的事务都是只做查询 &ndash;&gt;-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--&lt;!&ndash; 配置事务切入点，以及把事务切入点和事务属性关联在一起 &ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash; 事务的切入点，execution切入点表达式 &ndash;&gt;-->
        <!--<aop:pointcut expression="execution(* com.huanletao.huanletao.service.impl.*.*(..))" id="txPointcut"/>-->
        <!--&lt;!&ndash; 使用aop，让事务属性和事务切入点关联 &ndash;&gt;-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>-->
    <!--</aop:config>-->


    <aop:config>
        <aop:advisor pointcut="execution(* com.huanletao.huanletao.service.impl.*.*(..))"
                     advice-ref="txAdvice" />
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="huanletaoTransactionManager">
        <tx:attributes>
            <tx:method name="save*" no-rollback-for="Throwable"
                       propagation="REQUIRED" />
            <tx:method name="update*" rollback-for="Throwable" propagation=  "REQUIRED" />
            <tx:method name="delete*" />
            <tx:method name="modify*" />
            <tx:method name="create*" />
            <tx:method name="*" rollback-for="Throwable" propagation=    "REQUIRED" />
        </tx:attributes>
    </tx:advice>

</beans>