<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 这里有个坑，我把swaggerConfig文件刚开始写在controller中，结果总是会遇到莫名其妙的错误，在SpringMVC中
    国，controller该组件由SpringMVC配置文件扫描，所以SwaggerConfig.java不要写在controller中 -->
    <!-- 启用注解 -->
    <context:annotation-config/>
    <!--将静态资源交由默认的servlet处理-->
    <mvc:default-servlet-handler/>
    <!--重要！配置swagger资源不被拦截-->
    <!--<mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />-->
    <!--<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />-->
    <!--重要！将你的SwaggerConfig配置类注入-->
    <!--<bean id="swaggerConfig" class="com.huanletao.huanletao.config.SwaggerConfig"/>-->

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name = "prefix" value="/META-INF/resources/"></property>
        <property name = "suffix" value = ""></property>
    </bean>

    <!--扫描controller包,-->
    <context:component-scan base-package="com.huanletao.huanletao.controller"/>

    <!--2.加载处理器映射器及处理器适配器-->
    <mvc:annotation-driven />

    <mvc:annotation-driven>
        <!--使用fastjson进行java对象与json字符串的互相转换-->
        <mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes" value="application/json"/>
                <property name="features">
                    <array>
                        <value>WriteMapNullValue</value>
                        <value>WriteDateUseDateFormat</value>
                    </array>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--定义springmvc文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="maxUploadSize" value="5242880"/>
    </bean>

    <!--放行静态文件-->
    <mvc:resources mapping="/js/*" location="/static/"></mvc:resources>

    <!--乱码处理-->
    <mvc:annotation-driven >
        <!-- 消息转换器 -->
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--&lt;!&ndash;下面的用于开启shiro的权限注解&ndash;&gt;-->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">-->
        <!--<property name="proxyTargetClass" value="true"/>-->
    <!--</bean>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->

</beans>
